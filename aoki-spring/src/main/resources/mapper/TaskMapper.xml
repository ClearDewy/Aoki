<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cleardewy.aoki.mapper.TaskMapper">
    <select id="getTask" resultType="TaskDto" parameterType="Integer">
        SELECT id, name, publish, topicId, beginTime, endTime FROM task WHERE id=#{id}
    </select>
    <insert id="createTask" parameterType="TaskDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task(`name`,`topicId`,`beginTime`,`endTime`)
        VALUE (#{name},#{topicId},#{beginTime},#{endTime})
    </insert>
    <update id="updateTask" parameterType="TaskDto">
        UPDATE task SET `name`=#{name},`publish`=#{publish},`topicId`=#{topicId},`beginTime`=#{beginTime},`endTime`=#{endTime}
        WHERE `id`=#{id}
    </update>
    <delete id="deleteTask" parameterType="Integer">
        DELETE FROM task WHERE `id`=#{id}
    </delete>
    <select id="getOwnerTasks" resultType="TaskListOwnerVo">
        SELECT task.id, task.name, task.publish, topicId, topic.name as topicName, DATE_FORMAT(beginTime, '%Y-%m-%d %H:%i:%s'), DATE_FORMAT(endTime, '%Y-%m-%d %H:%i:%s')
        FROM task
                 INNER JOIN topic ON task.topicId = topic.id
        WHERE topic.lessonId = #{lessonId} AND topic.ownerId = #{id}
    </select>
    <select id="getMemberTasks" resultType="TaskListMemberVo">
        SELECT task.id, task.name, DATE_FORMAT(beginTime, '%Y-%m-%d %H:%i:%s') as beginTime, DATE_FORMAT(endTime, '%Y-%m-%d %H:%i:%s') as endTime,COALESCE(tasksubmitted.submitted, false) as submitted
        FROM task
                 INNER JOIN topicmember ON task.topicId = topicmember.topicId
                 LEFT JOIN tasksubmitted
                            ON task.id = tasksubmitted.taskId AND topicmember.memberId=tasksubmitted.memberId
        WHERE topicmember.topicId=#{topicId} AND topicmember.memberId = #{id} AND task.publish=true
    </select>
    <select id="getMemberTasksTeam" resultType="TaskListMemberVo">
        SELECT task.id, task.name, DATE_FORMAT(beginTime, '%Y-%m-%d %H:%i:%s') as beginTime, DATE_FORMAT(endTime, '%Y-%m-%d %H:%i:%s') as endTime,COALESCE(tasksubmitted.submitted, false) as submitted
        FROM task
                 INNER JOIN topicmember ON task.topicId = topicmember.topicId
                 INNER JOIN teammember ON topicmember.memberId = teammember.id
                 LEFT JOIN tasksubmitted
                            ON task.id = tasksubmitted.taskId AND topicmember.memberId=tasksubmitted.memberId
        WHERE topicmember.topicId=#{topicId} AND teammember.memberId = #{id} AND task.publish=true
    </select>
    <select id="verifyTaskOwner" resultType="Integer">
        SELECT count(*) FROM task
        JOIN topic on topic.id = task.topicId
        WHERE topic.ownerId=#{id} AND task.id=#{taskId}
    </select>
    <update id="toggleTaskPublish" parameterType="Integer">
        UPDATE task SET publish = IF(publish = 1, 0, 1)
        WHERE id=#{taskId}
    </update>


    <select id="getTaskQuestions" parameterType="Integer" resultType="QuestionDto">
        SELECT id, taskId, content FROM question WHERE taskId=#{taskId}
    </select>

    <insert id="createTaskQuestions" parameterType="java.util.List">
        INSERT INTO question (taskId, content) VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.taskId}, #{item.content})
        </foreach>
    </insert>
    <update id="updateTaskQuestions" parameterType="java.util.List">
        UPDATE question
        SET content = #{content}
        WHERE id = #{id};
    </update>
    <delete id="deleteTaskQuestions" parameterType="java.util.List">
        DELETE FROM question
        WHERE id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="verifyScoreRuleOwner" resultType="Integer">
        SELECT COUNT(*) FROM scorerule
        JOIN task on task.id = scorerule.taskId
        JOIN topic on topic.id = task.topicId
        WHERE scorerule.id=#{srId} AND topic.ownerId=#{id}
    </select>
    <insert id="createScoreRule" parameterType="ScoreRuleDto">
        INSERT INTO scorerule(`name`,`taskId`,`limit`) VALUE (#{name},#{taskId},#{limit})
    </insert>
    <update id="updateScoreRule" parameterType="ScoreRuleDto">
        UPDATE scorerule SET `name`=#{name},`limit`=#{limit} WHERE `id`=#{id}
    </update>
    <delete id="deleteScoreRule" parameterType="Integer">
        DELETE FROM scorerule WHERE `id`=#{id}
    </delete>
    <select id="getScoreRule" parameterType="Integer" resultType="ScoreRuleDto">
        SELECT `id`, `name`, `taskId`, `limit` FROM scorerule WHERE taskId=#{taskId}
    </select>
    <insert id="submitAnswer" parameterType="AnswerDto">
        INSERT INTO answer (`questionId`, `ownerId`, `content`)
        VALUES (#{questionId}, #{ownerId}, #{content})
        ON DUPLICATE KEY UPDATE content=#{content};
    </insert>
    <select id="getQuestionAnswerList" parameterType="Integer" resultType="TaskQuestionAnswerList">
        SELECT question.id,question.content as questionContent,answer.content as answerContent
        FROM question
                 LEFT JOIN answer ON answer.questionId=question.id AND answer.ownerId=#{id}
        WHERE taskId=#{taskId}
    </select>
    <insert id="updateTaskSubmitted" parameterType="TaskSubmittedDto">
        INSERT INTO tasksubmitted (`taskId`, `memberId`, `submitted`)
        VALUES (#{taskId}, #{memberId}, #{submitted})
        ON DUPLICATE KEY UPDATE `submitted`=IF(`submitted`=1,1,#{submitted})
    </insert>

    <select id="getTaskMember" parameterType="Integer" resultType="TeamMemberVo">
        SELECT user.username,user.name,user.avatarURL
        FROM user
        INNER JOIN topicmember ON user.id=topicmember.memberId
        INNER JOIN task ON task.topicId=topicmember.topicId
        LEFT JOIN tasksubmitted ON task.id = tasksubmitted.taskId AND tasksubmitted.memberId=user.id
        WHERE task.id=#{taskId} AND `submitted`=1
    </select>

    <select id="getNoTaskMember" parameterType="Integer" resultType="TeamMemberVo">
        SELECT user.username,user.name,user.avatarURL
        FROM user
                 INNER JOIN topicmember ON user.id=topicmember.memberId
                 INNER JOIN task ON task.topicId=topicmember.topicId
                 LEFT JOIN tasksubmitted ON task.id = tasksubmitted.taskId AND tasksubmitted.memberId=user.id
        WHERE task.id=#{taskId} AND `submitted`!=1
    </select>

    <select id="getScoreRecord" parameterType="Integer" resultType="ScoreEditVo">
        SELECT scorerule.id,name,`limit`,COALESCE(scorerecord.score,0) FROM scorerule
        LEFT JOIN scorerecord ON scorerecord.memberId=#{id} AND scorerecord.scoreRuleId=scorerule.id
        WHERE scorerule.taskId=#{taskId}
    </select>

    <insert id="submitScoreRecord" parameterType="ScoreRecordDto">
        INSERT INTO scorerecord (`scoreRuleId`, `taskId`, `memberId`,`score`)
        VALUES (#{scoreRuleId}, #{taskId}, #{memberId}, #{score})
        ON DUPLICATE KEY UPDATE score=#{score};
    </insert>
</mapper>

